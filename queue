JavaScript引擎是单线程运行的,浏览器无论在什么时候都只且只有一个线程在运行JavaScript程序。 

浏览器的内核是多线程的，它们在内核控制下相互配合以保持同步，一个浏览器至少实现三个常驻线程：
JavaScript引擎线程，GUI渲染线程，浏览器事件触发线程。 

JavaScript引擎是基于事件驱动单线程执行的，JavaScript引擎一直等待着任务队列中任务的到来，
然后加以处理，浏览器无论什么时候都只有一个JavaScript线程在运行JavaScript程序。 

GUI渲染线程负责渲染浏览器界面，当界面需要重绘（Repaint）或由于某种操作引发回流(Reflow)时,该线程就会执行。
但需要注意，GUI渲染线程与JavaScript引擎是互斥的，当JavaScript引擎执行时GUI线程会被挂起，
GUI更新会被保存在一个队列中等到JavaScript引擎空闲时立即被执行。 

事件触发线程，当一个事件被触发时该线程会把事件添加到待处理队列的队尾，
等待JavaScript引擎的处理。这些事件可来自JavaScript引擎当前执行的代码块如setTimeout、
也可来自浏览器内核的其他线程如鼠标点击、Ajax异步请求等，但由于JavaScript的单线程关系,
所有这些事件都得排队等待JavaScript引擎处理（当线程中没有执行任何同步代码的前提下才会执行异步代码）。 

setTimeout(function(){console.log(1);}, 0);  
console.log(2);  
// 2  
//1

上面代码的执行结果总是2，1，因为只有在执行完第二行以后，系统才会去执行"任务队列"中的回调函数。 
setTimeout(fn,0)的含义是，指定某个任务在主线程最早可得的空闲时间执行，
也就是说，尽可能早得执行。它在"任务队列"的尾部添加一个事件，
因此要等到同步任务和"任务队列"现有的事件都处理完，才会得到执行。 

demo：

console.log(1)  
setTimeout(function () {console.log('a')}, 10);  
setTimeout(function () {console.log('b')}, 0);  
var sum = 0;  
for (var i = 0; i < 1000000; i ++) {  
    sum += i;  
}  
console.log(sum);  
setTimeout(function () {console.log('c');}, 0);  

//1 
//499999500000 
//b 
//a 
//c 
