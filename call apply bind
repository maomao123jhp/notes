apply 、 call 、bind 三者都是用来改变函数的this对象的指向的，三者第一个参数都是this要指向的对象，也就是想指定的上下文

var func = function(arg1, arg2) {};

---------------------------区别：

1、传参
func.call(this, arg1, arg2);
func.apply(this, [arg1, arg2])

2、调用时机
bind 会创建一个新函数，称为绑定函数，便于稍后调用；
apply 、call 则是立即调用 。

---------------------------用途：

1、数组追加：
    var arr1 = [1,2,3];
    var arr2 = [4,5,6];
    Array.prototype.push.apply(arr1, arr2);
    // arr1 值为  [1,2,3,4,5,6]

2、将arr2插入arr1的index位置。
    var arr1=[1,2,3],arr2=[4,5,6],index=1;
    Array.prototype.splice.apply(arr1,[index,0].concat(arr2)); 
    console.log(arr1) //[1, 4, 5, 6, 2, 3]

3、优雅降级数组
    function reduceDimension(arr) {
        return Array.prototype.concat.apply([], arr);
    }
    var a=reduceDimension([[1,2,3],[4,5],6]) //[1,2,3,4,5,6]

4、获取数组中的最大值和最小值
    var  numbers = [1, 2 , 3 , -1 ];
    var maxNumbers = Math.max.apply(Math, numbers),   //3
    或 maxNumbers = Math.max.call(Math,1, 2 , 3 , -1); //3

5、验证是否是数组（前提是toString()方法没有被重写过）
    function isArray(obj){
       return Object.prototype.toString.call(obj) === '[object Array]' ;
    }

6、类（伪）数组使用数组方法
    var domNodes = Array.prototype.slice.call(document.getElementsByTagName("*"));
    Javascript中存在一种名为伪数组的对象结构。
    比较特别的是 arguments 对象，还有像调用 getElementsByTagName , document.childNodes 之类的，
    它们返回NodeList对象都属于伪数组。不能应用 Array下的 push , pop 等方法。
    但是我们能通过 Array.prototype.slice.call 转换为真正的数组的带有 length 属性的对象，
    这样 domNodes 就可以应用 Array 下的所有方法了。

7、例如给每一个 log 消息添加一个"(add)"的前辍
    function log(){
      var args = Array.prototype.slice.call(arguments);
      args.unshift('(app)');

      console.log.apply(console, args);
    };
    log("my msg");    //(add)my msg

8、优雅解决this缓存问题
    var foo = {
        bar : 1,
        eventBind: function(){
            var _this = this;
            $('.someClass').on('click',function(event) {
                console.log(_this.bar);     //1
            });
        }
    }
    可改写为
    var foo = {
        bar : 1,
        eventBind: function(){
            $('.someClass').on('click',function(event) {
                console.log(this.bar);      //1
            }.bind(this));
        }
    }

---------------------------注意：

1、在Javascript中，多次 bind() 是无效的。
更深层次的原因， bind() 的实现，相当于使用函数在内部包了一个 call / apply ，
第二次 bind() 相当于再包住第一次 bind() ,故第二次以后的 bind 是无法生效的。

    var bar = function(){
        console.log(this.x);
    }
    var foo = {
        x:3
    }
    var sed = {
        x:4
    }
    var func = bar.bind(foo).bind(sed);
    func(); //3

    var fiv = {
        x:5
    }
    var func = bar.bind(foo).bind(sed).bind(fiv);
    func(); //3